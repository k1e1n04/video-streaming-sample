/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: video.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace video {
  export class UploadVideoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(
      data?:
        | any[]
        | ({} & (
            | {
                title?: string;
                chunk?: never;
              }
            | {
                title?: never;
                chunk?: Uint8Array;
              }
          )),
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("title" in data && data.title != undefined) {
          this.title = data.title;
        }
        if ("chunk" in data && data.chunk != undefined) {
          this.chunk = data.chunk;
        }
      }
    }
    get title() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set title(value: string) {
      pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_title() {
      return pb_1.Message.getField(this, 1) != null;
    }
    get chunk() {
      return pb_1.Message.getFieldWithDefault(
        this,
        2,
        new Uint8Array(0),
      ) as Uint8Array;
    }
    set chunk(value: Uint8Array) {
      pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_chunk() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get data() {
      const cases: {
        [index: number]: "none" | "title" | "chunk";
      } = {
        0: "none",
        1: "title",
        2: "chunk",
      };
      return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
      title?: string;
      chunk?: Uint8Array;
    }): UploadVideoRequest {
      const message = new UploadVideoRequest({});
      if (data.title != null) {
        message.title = data.title;
      }
      if (data.chunk != null) {
        message.chunk = data.chunk;
      }
      return message;
    }
    toObject() {
      const data: {
        title?: string;
        chunk?: Uint8Array;
      } = {};
      if (this.title != null) {
        data.title = this.title;
      }
      if (this.chunk != null) {
        data.chunk = this.chunk;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_title) writer.writeString(1, this.title);
      if (this.has_chunk) writer.writeBytes(2, this.chunk);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): UploadVideoRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new UploadVideoRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.title = reader.readString();
            break;
          case 2:
            message.chunk = reader.readBytes();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UploadVideoRequest {
      return UploadVideoRequest.deserialize(bytes);
    }
  }
  export class UploadVideoResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            video_id?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("video_id" in data && data.video_id != undefined) {
          this.video_id = data.video_id;
        }
      }
    }
    get video_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set video_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { video_id?: string }): UploadVideoResponse {
      const message = new UploadVideoResponse({});
      if (data.video_id != null) {
        message.video_id = data.video_id;
      }
      return message;
    }
    toObject() {
      const data: {
        video_id?: string;
      } = {};
      if (this.video_id != null) {
        data.video_id = this.video_id;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.video_id.length) writer.writeString(1, this.video_id);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): UploadVideoResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new UploadVideoResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.video_id = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UploadVideoResponse {
      return UploadVideoResponse.deserialize(bytes);
    }
  }
  export class GetVideoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            video_id?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("video_id" in data && data.video_id != undefined) {
          this.video_id = data.video_id;
        }
      }
    }
    get video_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set video_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { video_id?: string }): GetVideoRequest {
      const message = new GetVideoRequest({});
      if (data.video_id != null) {
        message.video_id = data.video_id;
      }
      return message;
    }
    toObject() {
      const data: {
        video_id?: string;
      } = {};
      if (this.video_id != null) {
        data.video_id = this.video_id;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.video_id.length) writer.writeString(1, this.video_id);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVideoRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetVideoRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.video_id = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetVideoRequest {
      return GetVideoRequest.deserialize(bytes);
    }
  }
  export class GetVideoResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            presigned_url?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("presigned_url" in data && data.presigned_url != undefined) {
          this.presigned_url = data.presigned_url;
        }
      }
    }
    get presigned_url() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set presigned_url(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { presigned_url?: string }): GetVideoResponse {
      const message = new GetVideoResponse({});
      if (data.presigned_url != null) {
        message.presigned_url = data.presigned_url;
      }
      return message;
    }
    toObject() {
      const data: {
        presigned_url?: string;
      } = {};
      if (this.presigned_url != null) {
        data.presigned_url = this.presigned_url;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.presigned_url.length) writer.writeString(1, this.presigned_url);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): GetVideoResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new GetVideoResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.presigned_url = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetVideoResponse {
      return GetVideoResponse.deserialize(bytes);
    }
  }
  export class ListVideosRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
      }
    }
    static fromObject(data: {}): ListVideosRequest {
      const message = new ListVideosRequest({});
      return message;
    }
    toObject() {
      const data: {} = {};
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): ListVideosRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new ListVideosRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListVideosRequest {
      return ListVideosRequest.deserialize(bytes);
    }
  }
  export class VideoInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            video_id?: string;
            title?: string;
            created_at?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("video_id" in data && data.video_id != undefined) {
          this.video_id = data.video_id;
        }
        if ("title" in data && data.title != undefined) {
          this.title = data.title;
        }
        if ("created_at" in data && data.created_at != undefined) {
          this.created_at = data.created_at;
        }
      }
    }
    get video_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set video_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get title() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set title(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get created_at() {
      return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set created_at(value: string) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
      video_id?: string;
      title?: string;
      created_at?: string;
    }): VideoInfo {
      const message = new VideoInfo({});
      if (data.video_id != null) {
        message.video_id = data.video_id;
      }
      if (data.title != null) {
        message.title = data.title;
      }
      if (data.created_at != null) {
        message.created_at = data.created_at;
      }
      return message;
    }
    toObject() {
      const data: {
        video_id?: string;
        title?: string;
        created_at?: string;
      } = {};
      if (this.video_id != null) {
        data.video_id = this.video_id;
      }
      if (this.title != null) {
        data.title = this.title;
      }
      if (this.created_at != null) {
        data.created_at = this.created_at;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.video_id.length) writer.writeString(1, this.video_id);
      if (this.title.length) writer.writeString(2, this.title);
      if (this.created_at.length) writer.writeString(3, this.created_at);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoInfo {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new VideoInfo();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.video_id = reader.readString();
            break;
          case 2:
            message.title = reader.readString();
            break;
          case 3:
            message.created_at = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): VideoInfo {
      return VideoInfo.deserialize(bytes);
    }
  }
  export class ListVideosResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            videos?: VideoInfo[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("videos" in data && data.videos != undefined) {
          this.videos = data.videos;
        }
      }
    }
    get videos() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        VideoInfo,
        1,
      ) as VideoInfo[];
    }
    set videos(value: VideoInfo[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
      videos?: ReturnType<typeof VideoInfo.prototype.toObject>[];
    }): ListVideosResponse {
      const message = new ListVideosResponse({});
      if (data.videos != null) {
        message.videos = data.videos.map((item) => VideoInfo.fromObject(item));
      }
      return message;
    }
    toObject() {
      const data: {
        videos?: ReturnType<typeof VideoInfo.prototype.toObject>[];
      } = {};
      if (this.videos != null) {
        data.videos = this.videos.map((item: VideoInfo) => item.toObject());
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.videos.length)
        writer.writeRepeatedMessage(1, this.videos, (item: VideoInfo) =>
          item.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): ListVideosResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new ListVideosResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.videos, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                VideoInfo.deserialize(reader),
                VideoInfo,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListVideosResponse {
      return ListVideosResponse.deserialize(bytes);
    }
  }
  interface GrpcUnaryServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  }
  interface GrpcStreamServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
  }
  interface GrpWritableServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  }
  interface GrpcChunkServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  }
  interface GrpcPromiseServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
  }
  export abstract class UnimplementedVideoServiceService {
    static definition = {
      UploadVideo: {
        path: "/video.VideoService/UploadVideo",
        requestStream: true,
        responseStream: false,
        requestSerialize: (message: UploadVideoRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          UploadVideoRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: UploadVideoResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          UploadVideoResponse.deserialize(new Uint8Array(bytes)),
      },
      GetVideoURL: {
        path: "/video.VideoService/GetVideoURL",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: GetVideoRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          GetVideoRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: GetVideoResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          GetVideoResponse.deserialize(new Uint8Array(bytes)),
      },
      ListVideos: {
        path: "/video.VideoService/ListVideos",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: ListVideosRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          ListVideosRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: ListVideosResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          ListVideosResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract UploadVideo(
      call: grpc_1.ServerReadableStream<
        UploadVideoRequest,
        UploadVideoResponse
      >,
      callback: grpc_1.sendUnaryData<UploadVideoResponse>,
    ): void;
    abstract GetVideoURL(
      call: grpc_1.ServerUnaryCall<GetVideoRequest, GetVideoResponse>,
      callback: grpc_1.sendUnaryData<GetVideoResponse>,
    ): void;
    abstract ListVideos(
      call: grpc_1.ServerUnaryCall<ListVideosRequest, ListVideosResponse>,
      callback: grpc_1.sendUnaryData<ListVideosResponse>,
    ): void;
  }
  export class VideoServiceClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedVideoServiceService.definition,
    "VideoService",
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    UploadVideo: GrpWritableServiceInterface<
      UploadVideoRequest,
      UploadVideoResponse
    > = (
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<UploadVideoResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<UploadVideoResponse>,
      callback?: grpc_1.requestCallback<UploadVideoResponse>,
    ): grpc_1.ClientWritableStream<UploadVideoRequest> => {
      return super.UploadVideo(metadata, options, callback);
    };
    GetVideoURL: GrpcUnaryServiceInterface<GetVideoRequest, GetVideoResponse> =
      (
        message: GetVideoRequest,
        metadata:
          | grpc_1.Metadata
          | grpc_1.CallOptions
          | grpc_1.requestCallback<GetVideoResponse>,
        options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVideoResponse>,
        callback?: grpc_1.requestCallback<GetVideoResponse>,
      ): grpc_1.ClientUnaryCall => {
        return super.GetVideoURL(message, metadata, options, callback);
      };
    ListVideos: GrpcUnaryServiceInterface<
      ListVideosRequest,
      ListVideosResponse
    > = (
      message: ListVideosRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<ListVideosResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<ListVideosResponse>,
      callback?: grpc_1.requestCallback<ListVideosResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.ListVideos(message, metadata, options, callback);
    };
  }
}
